Version 3.2 HI-TECH Software Intermediate Code
"16 canlib\can.h
[s S1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S1 . brp sjw sam seg1ph seg2ph prseg btlmode ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef __int24 int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 52: typedef unsigned char uint8_t;
[; ;stdint.h: 58: typedef unsigned int uint16_t;
[; ;stdint.h: 65: typedef __uint24 uint24_t;
[; ;stdint.h: 72: typedef unsigned long int uint32_t;
[; ;stdint.h: 88: typedef signed char int_least8_t;
[; ;stdint.h: 96: typedef signed int int_least16_t;
[; ;stdint.h: 109: typedef __int24 int_least24_t;
[; ;stdint.h: 118: typedef signed long int int_least32_t;
[; ;stdint.h: 136: typedef unsigned char uint_least8_t;
[; ;stdint.h: 143: typedef unsigned int uint_least16_t;
[; ;stdint.h: 154: typedef __uint24 uint_least24_t;
[; ;stdint.h: 162: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 181: typedef signed char int_fast8_t;
[; ;stdint.h: 188: typedef signed int int_fast16_t;
[; ;stdint.h: 200: typedef __int24 int_fast24_t;
[; ;stdint.h: 208: typedef signed long int int_fast32_t;
[; ;stdint.h: 224: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 230: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 240: typedef __uint24 uint_fast24_t;
[; ;stdint.h: 247: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 268: typedef int32_t intmax_t;
[; ;stdint.h: 282: typedef uint32_t uintmax_t;
[; ;stdint.h: 289: typedef int16_t intptr_t;
[; ;stdint.h: 294: typedef uint16_t uintptr_t;
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;can.h: 16: typedef struct {
[; ;can.h: 18: uint8_t brp;
[; ;can.h: 20: uint8_t sjw;
[; ;can.h: 23: uint8_t sam;
[; ;can.h: 25: uint8_t seg1ph;
[; ;can.h: 27: uint8_t seg2ph;
[; ;can.h: 29: uint8_t prseg;
[; ;can.h: 33: bool btlmode;
[; ;can.h: 34: } can_timing_t;
[; ;can.h: 37: typedef struct {
[; ;can.h: 39: uint16_t sid;
[; ;can.h: 41: uint8_t data_len;
[; ;can.h: 43: uint8_t data[8];
[; ;can.h: 44: } can_msg_t;
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;timing_util.h: 8: bool can_generate_timing_params(uint32_t can_frequency, can_timing_t *timing);
"7 canlib/util/timing_util.c
[v _can_generate_timing_params `(uc ~T0 @X0 1 ef2`ul`*S1 ]
"8
{
[; ;timing_util.c: 7: bool can_generate_timing_params(uint32_t can_frequency, can_timing_t *timing)
[; ;timing_util.c: 8: {
[e :U _can_generate_timing_params ]
"7
[v _can_frequency `ul ~T0 @X0 1 r1 ]
[v _timing `*S1 ~T0 @X0 1 r2 ]
"8
[f ]
[; ;timing_util.c: 10: switch (can_frequency) {
"10
[e $U 5  ]
{
[; ;timing_util.c: 11: case 48000000:
"11
[e :U 6 ]
[; ;timing_util.c: 12: timing->brp = 47;
"12
[e = . *U _timing 0 -> -> 47 `i `uc ]
[; ;timing_util.c: 13: timing->sjw = 3;
"13
[e = . *U _timing 1 -> -> 3 `i `uc ]
[; ;timing_util.c: 14: timing->btlmode = 1;
"14
[e = . *U _timing 6 -> -> 1 `i `uc ]
[; ;timing_util.c: 15: timing->sam = 0;
"15
[e = . *U _timing 2 -> -> 0 `i `uc ]
[; ;timing_util.c: 16: timing->seg1ph = 4;
"16
[e = . *U _timing 3 -> -> 4 `i `uc ]
[; ;timing_util.c: 17: timing->prseg = 0;
"17
[e = . *U _timing 5 -> -> 0 `i `uc ]
[; ;timing_util.c: 18: timing->seg2ph = 4;
"18
[e = . *U _timing 4 -> -> 4 `i `uc ]
[; ;timing_util.c: 19: return 1;
"19
[e ) -> -> 1 `i `uc ]
[e $UE 3  ]
[; ;timing_util.c: 20: case 32000000:
"20
[e :U 7 ]
[; ;timing_util.c: 21: timing->brp = 31;
"21
[e = . *U _timing 0 -> -> 31 `i `uc ]
[; ;timing_util.c: 22: timing->sjw = 3;
"22
[e = . *U _timing 1 -> -> 3 `i `uc ]
[; ;timing_util.c: 23: timing->btlmode = 1;
"23
[e = . *U _timing 6 -> -> 1 `i `uc ]
[; ;timing_util.c: 24: timing->sam = 0;
"24
[e = . *U _timing 2 -> -> 0 `i `uc ]
[; ;timing_util.c: 25: timing->seg1ph = 4;
"25
[e = . *U _timing 3 -> -> 4 `i `uc ]
[; ;timing_util.c: 26: timing->prseg = 0;
"26
[e = . *U _timing 5 -> -> 0 `i `uc ]
[; ;timing_util.c: 27: timing->seg2ph = 4;
"27
[e = . *U _timing 4 -> -> 4 `i `uc ]
[; ;timing_util.c: 28: return 1;
"28
[e ) -> -> 1 `i `uc ]
[e $UE 3  ]
[; ;timing_util.c: 29: case 12000000:
"29
[e :U 8 ]
[; ;timing_util.c: 30: timing->brp = 11;
"30
[e = . *U _timing 0 -> -> 11 `i `uc ]
[; ;timing_util.c: 31: timing->sjw = 3;
"31
[e = . *U _timing 1 -> -> 3 `i `uc ]
[; ;timing_util.c: 32: timing->btlmode = 1;
"32
[e = . *U _timing 6 -> -> 1 `i `uc ]
[; ;timing_util.c: 33: timing->sam = 0;
"33
[e = . *U _timing 2 -> -> 0 `i `uc ]
[; ;timing_util.c: 34: timing->seg1ph = 4;
"34
[e = . *U _timing 3 -> -> 4 `i `uc ]
[; ;timing_util.c: 35: timing->prseg = 0;
"35
[e = . *U _timing 5 -> -> 0 `i `uc ]
[; ;timing_util.c: 36: timing->seg2ph = 4;
"36
[e = . *U _timing 4 -> -> 4 `i `uc ]
[; ;timing_util.c: 37: return 1;
"37
[e ) -> -> 1 `i `uc ]
[e $UE 3  ]
[; ;timing_util.c: 38: case 1000000:
"38
[e :U 9 ]
[; ;timing_util.c: 39: timing->brp = 0;
"39
[e = . *U _timing 0 -> -> 0 `i `uc ]
[; ;timing_util.c: 40: timing->sjw = 3;
"40
[e = . *U _timing 1 -> -> 3 `i `uc ]
[; ;timing_util.c: 41: timing->btlmode = 1;
"41
[e = . *U _timing 6 -> -> 1 `i `uc ]
[; ;timing_util.c: 42: timing->sam = 0;
"42
[e = . *U _timing 2 -> -> 0 `i `uc ]
[; ;timing_util.c: 43: timing->seg1ph = 4;
"43
[e = . *U _timing 3 -> -> 4 `i `uc ]
[; ;timing_util.c: 44: timing->prseg = 0;
"44
[e = . *U _timing 5 -> -> 0 `i `uc ]
[; ;timing_util.c: 45: timing->seg2ph = 4;
"45
[e = . *U _timing 4 -> -> 4 `i `uc ]
[; ;timing_util.c: 46: return 1;
"46
[e ) -> -> 1 `i `uc ]
[e $UE 3  ]
[; ;timing_util.c: 47: default:
"47
[e :U 10 ]
[; ;timing_util.c: 49: return 0;
"49
[e ) -> -> 0 `i `uc ]
[e $UE 3  ]
"50
}
[; ;timing_util.c: 50: }
[e $U 4  ]
"10
[e :U 5 ]
[e [\ _can_frequency , $ -> -> 48000000 `l `ul 6
 , $ -> -> 32000000 `l `ul 7
 , $ -> -> 12000000 `l `ul 8
 , $ -> -> 1000000 `l `ul 9
 10 ]
"50
[e :U 4 ]
[; ;timing_util.c: 51: }
"51
[e :UE 3 ]
}
